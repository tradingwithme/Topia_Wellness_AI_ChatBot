{"ast":null,"code":"var _jsxFileName = \"/workspaces/Topia_Wellness_AI_ChatBot/frontend/src/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Message from './Message';\nimport './styles/Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [hideTyping, setHideTyping] = useState(false);\n  const handleSend = async () => {\n    if (!input.trim()) return;\n\n    // Add user message\n    const newMessages = [...messages, {\n      text: input,\n      sender: 'user'\n    }];\n    setMessages(newMessages);\n    setInput(\"\");\n\n    // Show typing indicator\n    setIsTyping(true);\n    setHideTyping(false);\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = \"Hello! I am your sophisticated chatbot. How can I assist you today?\";\n      setMessages(prev => [...prev, {\n        text: botReply,\n        sender: 'bot',\n        // Pass callback so Message can notify when first sentence starts\n        onFirstSentence: () => {\n          setHideTyping(true);\n          setTimeout(() => setIsTyping(false), 500); // fade out then remove\n        }\n      }]);\n    }, 1500);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: \"\\uD83D\\uDCAC Topia Wellness AI Assistant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        text: msg.text,\n        sender: msg.sender,\n        onFirstSentence: msg.onFirstSentence\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `typing-indicator ${hideTyping ? \"hidden\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"chat-input\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send-button\",\n        onClick: handleSend,\n        children: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"v7p7Apjn5wloT1IcorN3mynrj+E=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","Message","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","isTyping","setIsTyping","hideTyping","setHideTyping","handleSend","trim","newMessages","text","sender","setTimeout","botReply","prev","onFirstSentence","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/workspaces/Topia_Wellness_AI_ChatBot/frontend/src/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Message from './Message';\nimport './styles/Chatbot.css';\n\nfunction Chatbot() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [hideTyping, setHideTyping] = useState(false);\n\n  const handleSend = async () => {\n    if (!input.trim()) return;\n\n    // Add user message\n    const newMessages = [...messages, { text: input, sender: 'user' }];\n    setMessages(newMessages);\n    setInput(\"\");\n\n    // Show typing indicator\n    setIsTyping(true);\n    setHideTyping(false);\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botReply = \"Hello! I am your sophisticated chatbot. How can I assist you today?\";\n      setMessages(prev => [\n        ...prev,\n        {\n          text: botReply,\n          sender: 'bot',\n          // Pass callback so Message can notify when first sentence starts\n          onFirstSentence: () => {\n            setHideTyping(true);\n            setTimeout(() => setIsTyping(false), 500); // fade out then remove\n          }\n        }\n      ]);\n    }, 1500);\n  };\n\n  return (\n    <div className=\"chatbot-container\">\n      <div className=\"chat-header\">ðŸ’¬ Topia Wellness AI Assistant</div>\n      <div className=\"chat-window\">\n        {messages.map((msg, index) => (\n          <Message\n            key={index}\n            text={msg.text}\n            sender={msg.sender}\n            onFirstSentence={msg.onFirstSentence}\n          />\n        ))}\n\n        {/* Typing Indicator */}\n        {isTyping && (\n          <div className={`typing-indicator ${hideTyping ? \"hidden\" : \"\"}`}>\n            <div className=\"dot\"></div>\n            <div className=\"dot\"></div>\n            <div className=\"dot\"></div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"chat-input-area\">\n        <input\n          type=\"text\"\n          className=\"chat-input\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Type your message...\"\n        />\n        <button className=\"send-button\" onClick={handleSend}>âž¤</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}