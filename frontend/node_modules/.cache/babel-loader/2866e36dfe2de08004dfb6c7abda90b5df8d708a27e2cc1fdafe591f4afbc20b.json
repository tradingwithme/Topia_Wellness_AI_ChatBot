{"ast":null,"code":"var _jsxFileName = \"/workspaces/Topia_Wellness_AI_ChatBot/frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './styles/style.css'; // ✅ Global styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 3\n}, this));\n\n//const express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst {\n  getChatbotResponse,\n  save_approved_response,\n  save_correction\n} = require('./generative_response');\nconst {\n  getModel\n} = require('./model_handling');\nconst {\n  save_csv\n} = require('./csv_handling');\n//const app = express();\nconst port = 3001;\napp.use(cors());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.post('/chatbot', async (req, res) => {\n  const {\n    user_input\n  } = req.body;\n  try {\n    const response = await getChatbotResponse(user_input);\n    res.json({\n      response\n    });\n  } catch (error) {\n    console.error('Error getting chatbot response:', error);\n    res.status(500).json({\n      error: 'Internal Server Error'\n    });\n  }\n});\napp.post('/feedback', async (req, res) => {\n  const {\n    user_input,\n    response,\n    feedback\n  } = req.body;\n  if (!user_input || !response || !feedback) {\n    return res.status(400).json({\n      error: 'Missing required fields'\n    });\n  }\n  try {\n    if (feedback === 'y') {\n      await save_approved_response(user_input, response);\n      // Optionally trigger periodic fine-tuning here\n    } else if (feedback === 'n') {\n      await save_correction(user_input, response);\n      // Trigger fine-tuning with corrections here\n    }\n    res.json({\n      message: 'Feedback processed successfully'\n    });\n  } catch (error) {\n    console.error('Error processing feedback:', error);\n    res.status(500).json({\n      error: 'Internal Server Error'\n    });\n  }\n});\napp.get('/model', async (req, res) => {\n  try {\n    const model = await getModel();\n    res.json({\n      model\n    });\n  } catch (error) {\n    console.error('Error getting model:', error);\n    res.status(500).json({\n      error: 'Internal Server Error'\n    });\n  }\n});\napp.post('/save_csv', async (req, res) => {\n  const {\n    data\n  } = req.body;\n  if (!data) {\n    return res.status(400).json({\n      error: 'No data provided'\n    });\n  }\n  try {\n    await save_csv(data);\n    res.json({\n      message: 'CSV saved successfully'\n    });\n  } catch (error) {\n    console.error('Error saving CSV:', error);\n    res.status(500).json({\n      error: 'Internal Server Error'\n    });\n  }\n});\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'ok'\n  });\n});\napp.get('/status', (req, res) => {\n  res.json({\n    status: 'Chatbot backend is running'\n  });\n});\napp.get('/version', (req, res) => {\n  res.json({\n    version: '1.0.0'\n  });\n});\napp.get('/info', (req, res) => {\n  res.json({\n    name: 'Topia Global Wellness Chatbot',\n    description: 'A chatbot for wellness and health advice',\n    version: '1.0.0'\n  });\n});\napp.listen(port, () => {\n  console.log(`Server is running on http://localhost:${port}`);\n});","map":{"version":3,"names":["React","ReactDOM","App","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber","bodyParser","require","cors","getChatbotResponse","save_approved_response","save_correction","getModel","save_csv","port","app","use","json","urlencoded","extended","post","req","res","user_input","body","response","error","console","status","feedback","message","get","model","data","version","name","description","listen","log"],"sources":["/workspaces/Topia_Wellness_AI_ChatBot/frontend/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './styles/style.css';  // ✅ Global styles\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n//const express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst { getChatbotResponse, save_approved_response, save_correction } = require('./generative_response');\nconst { getModel } = require('./model_handling');\nconst { save_csv } = require('./csv_handling');\n//const app = express();\nconst port = 3001;\napp.use(cors());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post('/chatbot', async (req, res) => {\n    const { user_input } = req.body;\n    try {\n        const response = await getChatbotResponse(user_input);\n        res.json({ response });\n    } catch (error) {\n        console.error('Error getting chatbot response:', error);\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n});\napp.post('/feedback', async (req, res) => {\n    const { user_input, response, feedback } = req.body;\n    if (!user_input || !response || !feedback) {\n        return res.status(400).json({ error: 'Missing required fields' });\n    }\n\n    try {\n        if (feedback === 'y') {\n            await save_approved_response(user_input, response);\n            // Optionally trigger periodic fine-tuning here\n        } else if (feedback === 'n') {\n            await save_correction(user_input, response);\n            // Trigger fine-tuning with corrections here\n        }\n        res.json({ message: 'Feedback processed successfully' });\n    } catch (error) {\n        console.error('Error processing feedback:', error);\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n});\napp.get('/model', async (req, res) => {\n    try {\n        const model = await getModel();\n        res.json({ model });\n    } catch (error) {\n        console.error('Error getting model:', error);\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n});\napp.post('/save_csv', async (req, res) => {\n    const { data } = req.body;\n    if (!data) {\n        return res.status(400).json({ error: 'No data provided' });\n    }\n    try {\n        await save_csv(data);\n        res.json({ message: 'CSV saved successfully' });\n    } catch (error) {\n        console.error('Error saving CSV:', error);\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n});\napp.get('/health', (req, res) => {\n    res.json({ status: 'ok' });\n});\napp.get('/status', (req, res) => {\n    res.json({ status: 'Chatbot backend is running' });\n});\napp.get('/version', (req, res) => {\n    res.json({ version: '1.0.0' });\n});\napp.get('/info', (req, res) => {\n    res.json({\n        name: 'Topia Global Wellness Chatbot',\n        description: 'A chatbot for wellness and health advice',\n        version: '1.0.0'\n    });\n});\n\napp.listen(port, () => {\n    console.log(`Server is running on http://localhost:${port}`);\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}