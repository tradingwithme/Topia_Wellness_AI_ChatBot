{"ast":null,"code":"var _jsxFileName = \"/workspaces/Topia_Wellness_AI_ChatBot/frontend/src/Chatbot.js\",\n  _s = $RefreshSig$();\n// src/Chatbot.js\nimport React, { useState, useEffect } from \"react\";\nimport Message from \"./Message\";\nimport \"./styles/Chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n\n  // Show a welcome message from bot at the very beginning\n  useEffect(() => {\n    const welcome = {\n      text: \"Hello! I am your sophisticated chatbot. How can I assist you today?\",\n      sender: \"bot\",\n      timestamp: new Date().toISOString()\n    };\n    setMessages([welcome]);\n  }, []);\n  const handleSend = async () => {\n    if (!input.trim()) return;\n\n    // Add user message\n    const userMsg = {\n      text: input,\n      sender: \"user\",\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, userMsg]);\n    setInput(\"\");\n\n    // Show typing indicator\n    setIsTyping(true);\n    try {\n      // Call backend (Flask/Express endpoint running chatbot_entry.py)\n      const res = await fetch(\"http://localhost:5000/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: userMsg.text\n        })\n      });\n      const data = await res.json();\n\n      // Add bot response\n      const botMsg = {\n        text: data.response || \"Hmm... I couldn‚Äôt generate a reply right now.\",\n        sender: \"bot\",\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, botMsg]);\n    } catch (error) {\n      console.error(\"Error fetching chatbot response:\", error);\n      setMessages(prev => [...prev, {\n        text: \"‚ö†Ô∏è Error: Unable to reach chatbot backend.\",\n        sender: \"system\",\n        timestamp: new Date().toISOString()\n      }]);\n    } finally {\n      setIsTyping(false); // hide typing indicator\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: \"\\uD83D\\uDCAC Topia's AI Wellness Assistant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        text: msg.text,\n        sender: msg.sender,\n        timestamp: msg.timestamp\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"chat-input\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\",\n        onKeyDown: e => e.key === \"Enter\" && handleSend()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send-button\",\n        onClick: handleSend,\n        children: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"jR6uTrwAp7mYu0GQWebHtq4I+AU=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","Message","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","isTyping","setIsTyping","welcome","text","sender","timestamp","Date","toISOString","handleSend","trim","userMsg","prev","res","fetch","method","headers","body","JSON","stringify","message","data","json","botMsg","response","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","value","onChange","e","target","placeholder","onKeyDown","key","onClick","_c","$RefreshReg$"],"sources":["/workspaces/Topia_Wellness_AI_ChatBot/frontend/src/Chatbot.js"],"sourcesContent":["// src/Chatbot.js\nimport React, { useState, useEffect } from \"react\";\nimport Message from \"./Message\";\nimport \"./styles/Chatbot.css\";\n\nfunction Chatbot() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n\n  // Show a welcome message from bot at the very beginning\n  useEffect(() => {\n    const welcome = {\n      text: \"Hello! I am your sophisticated chatbot. How can I assist you today?\",\n      sender: \"bot\",\n      timestamp: new Date().toISOString(),\n    };\n    setMessages([welcome]);\n  }, []);\n\n  const handleSend = async () => {\n    if (!input.trim()) return;\n\n    // Add user message\n    const userMsg = {\n      text: input,\n      sender: \"user\",\n      timestamp: new Date().toISOString(),\n    };\n    setMessages((prev) => [...prev, userMsg]);\n    setInput(\"\");\n\n    // Show typing indicator\n    setIsTyping(true);\n\n    try {\n      // Call backend (Flask/Express endpoint running chatbot_entry.py)\n      const res = await fetch(\"http://localhost:5000/api/chat\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ message: userMsg.text }),\n      });\n\n      const data = await res.json();\n\n      // Add bot response\n      const botMsg = {\n        text: data.response || \"Hmm... I couldn‚Äôt generate a reply right now.\",\n        sender: \"bot\",\n        timestamp: new Date().toISOString(),\n      };\n\n      setMessages((prev) => [...prev, botMsg]);\n    } catch (error) {\n      console.error(\"Error fetching chatbot response:\", error);\n      setMessages((prev) => [\n        ...prev,\n        {\n          text: \"‚ö†Ô∏è Error: Unable to reach chatbot backend.\",\n          sender: \"system\",\n          timestamp: new Date().toISOString(),\n        },\n      ]);\n    } finally {\n      setIsTyping(false); // hide typing indicator\n    }\n  };\n\n  return (\n    <div className=\"chatbot-container\">\n      <div className=\"chat-header\">üí¨ Topia's AI Wellness Assistant</div>\n      <div className=\"chat-window\">\n        {messages.map((msg, index) => (\n          <Message\n            key={index}\n            text={msg.text}\n            sender={msg.sender}\n            timestamp={msg.timestamp}\n          />\n        ))}\n\n        {/* Typing Indicator */}\n        {isTyping && (\n          <div className=\"typing-indicator\">\n            <div className=\"dot\"></div>\n            <div className=\"dot\"></div>\n            <div className=\"dot\"></div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"chat-input-area\">\n        <input\n          type=\"text\"\n          className=\"chat-input\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Type your message...\"\n          onKeyDown={(e) => e.key === \"Enter\" && handleSend()}\n        />\n        <button className=\"send-button\" onClick={handleSend}>\n          ‚û§\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Chatbot;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;;EAE/C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMY,OAAO,GAAG;MACdC,IAAI,EAAE,qEAAqE;MAC3EC,MAAM,EAAE,KAAK;MACbC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IACDV,WAAW,CAAC,CAACK,OAAO,CAAC,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAACV,KAAK,CAACW,IAAI,CAAC,CAAC,EAAE;;IAEnB;IACA,MAAMC,OAAO,GAAG;MACdP,IAAI,EAAEL,KAAK;MACXM,MAAM,EAAE,MAAM;MACdC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IACDV,WAAW,CAAEc,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAED,OAAO,CAAC,CAAC;IACzCX,QAAQ,CAAC,EAAE,CAAC;;IAEZ;IACAE,WAAW,CAAC,IAAI,CAAC;IAEjB,IAAI;MACF;MACA,MAAMW,GAAG,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;QACxDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,OAAO,EAAET,OAAO,CAACP;QAAK,CAAC;MAChD,CAAC,CAAC;MAEF,MAAMiB,IAAI,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC;;MAE7B;MACA,MAAMC,MAAM,GAAG;QACbnB,IAAI,EAAEiB,IAAI,CAACG,QAAQ,IAAI,+CAA+C;QACtEnB,MAAM,EAAE,KAAK;QACbC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;MAEDV,WAAW,CAAEc,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEW,MAAM,CAAC,CAAC;IAC1C,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD3B,WAAW,CAAEc,IAAI,IAAK,CACpB,GAAGA,IAAI,EACP;QACER,IAAI,EAAE,4CAA4C;QAClDC,MAAM,EAAE,QAAQ;QAChBC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CACF,CAAC;IACJ,CAAC,SAAS;MACRN,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;IACtB;EACF,CAAC;EAED,oBACER,OAAA;IAAKiC,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChClC,OAAA;MAAKiC,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAAgC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACnEtC,OAAA;MAAKiC,SAAS,EAAC,aAAa;MAAAC,QAAA,GACzB/B,QAAQ,CAACoC,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvBzC,OAAA,CAACF,OAAO;QAENY,IAAI,EAAE8B,GAAG,CAAC9B,IAAK;QACfC,MAAM,EAAE6B,GAAG,CAAC7B,MAAO;QACnBC,SAAS,EAAE4B,GAAG,CAAC5B;MAAU,GAHpB6B,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIX,CACF,CAAC,EAGD/B,QAAQ,iBACPP,OAAA;QAAKiC,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/BlC,OAAA;UAAKiC,SAAS,EAAC;QAAK;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC3BtC,OAAA;UAAKiC,SAAS,EAAC;QAAK;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC3BtC,OAAA;UAAKiC,SAAS,EAAC;QAAK;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAENtC,OAAA;MAAKiC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BlC,OAAA;QACE0C,IAAI,EAAC,MAAM;QACXT,SAAS,EAAC,YAAY;QACtBU,KAAK,EAAEtC,KAAM;QACbuC,QAAQ,EAAGC,CAAC,IAAKvC,QAAQ,CAACuC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC1CI,WAAW,EAAC,sBAAsB;QAClCC,SAAS,EAAGH,CAAC,IAAKA,CAAC,CAACI,GAAG,KAAK,OAAO,IAAIlC,UAAU,CAAC;MAAE;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrD,CAAC,eACFtC,OAAA;QAAQiC,SAAS,EAAC,aAAa;QAACiB,OAAO,EAAEnC,UAAW;QAAAmB,QAAA,EAAC;MAErD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACpC,EAAA,CArGQD,OAAO;AAAAkD,EAAA,GAAPlD,OAAO;AAuGhB,eAAeA,OAAO;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}