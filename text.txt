App.js : {import React, { useState, useEffect } from "react";
import SplashPage from "./SplashPage";
import Chatbot from "./Chatbot";
import "./styles/style.css"; // global styles

function App() {
  const [showSplash, setShowSplash] = useState(true);

  useEffect(() => {
    // Show splash for 3 seconds before switching
    const timer = setTimeout(() => {
      setShowSplash(false);
    }, 3000);

    return () => clearTimeout(timer);
  }, []);

  return (
    <div className="app-container">
      {showSplash ? <SplashPage /> : <Chatbot />}
    </div>
  );
}

export default App;},
Chatbot.js : {import React, { useState } from 'react';
import Message from './Message';
import './styles/Chatbot.css';

function Chatbot() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [hideTyping, setHideTyping] = useState(false);

  const handleSend = async () => {
    if (!input.trim()) return;

    // Add user message
    const newMessages = [...messages, { text: input, sender: 'user' }];
    setMessages(newMessages);
    setInput("");

    // Show typing indicator
    setIsTyping(true);
    setHideTyping(false);

    // Simulate bot response
    setTimeout(() => {
      const botReply = "Hello! I am your sophisticated chatbot. How can I assist you today?";
      setMessages(prev => [
        ...prev,
        {
          text: botReply,
          sender: 'bot',
          // Pass callback so Message can notify when first sentence starts
          onFirstSentence: () => {
            setHideTyping(true);
            setTimeout(() => setIsTyping(false), 500); // fade out then remove
          }
        }
      ]);
    }, 1500);
  };

  return (
    <div className="chatbot-container">
      <div className="chat-header">ðŸ’¬ AI Assistant</div>
      <div className="chat-window">
        {messages.map((msg, index) => (
          <Message
            key={index}
            text={msg.text}
            sender={msg.sender}
            onFirstSentence={msg.onFirstSentence}
          />
        ))}

        {/* Typing Indicator */}
        {isTyping && (
          <div className={`typing-indicator ${hideTyping ? "hidden" : ""}`}>
            <div className="dot"></div>
            <div className="dot"></div>
            <div className="dot"></div>
          </div>
        )}
      </div>

      <div className="chat-input-area">
        <input
          type="text"
          className="chat-input"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Type your message..."
        />
        <button className="send-button" onClick={handleSend}>âž¤</button>
      </div>
    </div>
  );
}

export default Chatbot;},
index.js : {import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './styles/style.css';  // âœ… Global styles

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const { getChatbotResponse, save_approved_response, save_correction } = require('./generative_response');
const { getModel } = require('./model_handling');
const { save_csv } = require('./csv_handling');
const app = express();
const port = 3001;
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

app.post('/chatbot', async (req, res) => {
    const { user_input } = req.body;
    try {
        const response = await getChatbotResponse(user_input);
        res.json({ response });
    } catch (error) {
        console.error('Error getting chatbot response:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});
app.post('/feedback', async (req, res) => {
    const { user_input, response, feedback } = req.body;
    if (!user_input || !response || !feedback) {
        return res.status(400).json({ error: 'Missing required fields' });
    }

    try {
        if (feedback === 'y') {
            await save_approved_response(user_input, response);
            // Optionally trigger periodic fine-tuning here
        } else if (feedback === 'n') {
            await save_correction(user_input, response);
            // Trigger fine-tuning with corrections here
        }
        res.json({ message: 'Feedback processed successfully' });
    } catch (error) {
        console.error('Error processing feedback:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});
app.get('/model', async (req, res) => {
    try {
        const model = await getModel();
        res.json({ model });
    } catch (error) {
        console.error('Error getting model:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});
app.post('/save_csv', async (req, res) => {
    const { data } = req.body;
    if (!data) {
        return res.status(400).json({ error: 'No data provided' });
    }
    try {
        await save_csv(data);
        res.json({ message: 'CSV saved successfully' });
    } catch (error) {
        console.error('Error saving CSV:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});
app.get('/health', (req, res) => {
    res.json({ status: 'ok' });
});
app.get('/status', (req, res) => {
    res.json({ status: 'Chatbot backend is running' });
});
app.get('/version', (req, res) => {
    res.json({ version: '1.0.0' });
});
app.get('/info', (req, res) => {
    res.json({
        name: 'Topia Global Wellness Chatbot',
        description: 'A chatbot for wellness and health advice',
        version: '1.0.0'
    });
});

app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});},
Message.js : {// Message.js
import React from 'react';
import './styles/Message.css';

function Message({ text, sender, timestamp }) {
  // Determine if the sender is user or bot
  const messageClass = sender === 'user' ? 'user-message' : 'bot-message';

  // Format timestamp (e.g., "10:45 PM")
  const formattedTime = new Date(timestamp).toLocaleTimeString([], {
    hour: '2-digit',
    minute: '2-digit',
  });

  return (
    <div className={`message ${messageClass}`}>
      <div className="message-bubble animate-in">
        {/* Sender Label */}
        <div className="message-meta">
          <span className="sender-label">
            {sender === 'user' ? 'You' : 'Bot'}
          </span>
        </div>

        {/* Message Content */}
        <div className="message-text">{text}</div>

        {/* Timestamp */}
        <div className="message-time">{formattedTime}</div>
      </div>
    </div>
  );
}

export default Message;},
server.js : {const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const { spawn } = require('child_process');

const app = express();
const port = process.env.PORT || 3001;

app.use(cors());
app.use(bodyParser.json());

// Chatbot endpoint
app.post('/chatbot', (req, res) => {
  const userMessage = req.body.message;
  // Call Python script to get chatbot response
  const pythonProcess = spawn('python3', [
    '../scripts/chatbot.py',
    userMessage
  ]);

  let reply = '';
  pythonProcess.stdout.on('data', (data) => {
    reply += data.toString();
  });

  pythonProcess.stderr.on('data', (data) => {
    console.error(`Python error: ${data}`);
  });

  pythonProcess.on('close', (code) => {
    res.json({ reply: reply.trim() });
  });

  pythonProcess.on('error', (err) => {
    console.error('Failed to start Python process:', err);
    res.status(500).json({ reply: 'Error: Could not start the chatbot process.' });
  });
});

// Feedback endpoint
app.post('/feedback', (req, res) => {
  const { feedback, user_input, response } = req.body;
  // Call Python script to handle feedback and fine-tuning
  const pythonProcess = spawn('python3', [
    '../scripts/chatbot_entry.py',
    '--feedback', feedback,
    '--user_input', user_input,
    '--response', response
  ]);

  pythonProcess.stdout.on('data', (data) => {
    console.log(`Python feedback: ${data}`);
  });

  pythonProcess.stderr.on('data', (data) => {
    console.error(`Python error: ${data}`);
  });

  pythonProcess.on('close', (code) => {
    res.json({ status: 'ok' });
  });

  pythonProcess.on('error', (err) => {
    console.error('Failed to start Python process:', err);
    res.status(500).json({ status: 'error' });
  });
});

app.get('/', (req, res) => {
  res.send('Topia Global Wellness Chatbot backend is running.');
});

app.listen(port, () => {
  console.log(`Chatbot backend server listening at http://localhost:${port}`);
});
},
SplashPage.js : {import React, { useEffect, useState } from 'react';
import './styles/SplashPage.css';

function SplashPage() {
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const audio = new Audio('/path/to/background-music.mp3');
    audio.loop = true;
    audio.play();

    return () => {
      audio.pause();
    };
  }, []);

  const goToChatbot = () => {
    setIsLoading(true);
    setTimeout(() => {
      window.location.href = "/chatbot"; // Or React Router push
    }, 1000);
  };

  return (
    <div className="splash-container">
      <div className="splash-content">
        <h1 className="title">Topia Global Wellness Chatbot</h1>
        <p className="tagline">Your journey to wellness begins here. Letâ€™s chat!</p>
        <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100" className="bubble-svg">
          <circle cx="50" cy="50" r="40" fill="#0072ff" />
          <text x="50" y="50" textAnchor="middle" fill="white" fontSize="18" dy=".3em">Chat</text>
        </svg>
        {isLoading && (
          <div className="loader-container">
            <div className="loader"></div>
          </div>
        )}
        <button className="enter-btn" onClick={goToChatbot}>
          Enter Chat
        </button>
      </div>
    </div>
  );
}

export default SplashPage;},
App.css : {/* App.css */

.app-container {
  height: 100vh;
  width: 100vw;
  background: linear-gradient(135deg, #eef2f3, #d9e4f5);
  display: flex;
  align-items: center;
  justify-content: center;
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
}

/* Splash screen */
.splash-screen {
  text-align: center;
  animation: fadeIn 1s ease;
}

.splash-title {
  font-size: 2.5rem;
  font-weight: bold;
  color: #2575fc;
  margin-bottom: 0.5rem;
}

.splash-subtitle {
  font-size: 1.2rem;
  color: #555;
  font-weight: 300;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}},
Chatbot.css : {/* ===========================
   Chatbot.css
   Sophisticated Styling
   =========================== */

/* Container */
.chatbot-container {
  width: 420px;
  max-width: 100%;
  height: 600px;
  margin: auto;
  display: flex;
  flex-direction: column;
  border-radius: 20px;
  background: #ffffff;
  box-shadow: 0 8px 28px rgba(0, 0, 0, 0.15);
  font-family: 'Inter', sans-serif;
  overflow: hidden;
  position: relative;
}

/* Header */
.chat-header {
  background: linear-gradient(135deg, #007bff, #00c6ff);
  color: #fff;
  text-align: center;
  font-size: 20px;
  font-weight: 600;
  padding: 16px;
  letter-spacing: 0.5px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  border-bottom: 1px solid rgba(255,255,255,0.2);
}

/* Chat Window */
.chat-window {
  flex: 1;
  padding: 20px;
  overflow-y: auto;
  background: #f9fafb;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

/* Input Area */
.chat-input-area {
  display: flex;
  border-top: 1px solid #e5e7eb;
  padding: 12px;
  background: #fff;
}

.chat-input {
  flex: 1;
  padding: 12px 14px;
  border: 1px solid #d1d5db;
  border-radius: 30px;
  outline: none;
  font-size: 15px;
  transition: border-color 0.2s ease;
}

.chat-input:focus {
  border-color: #007bff;
  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.15);
}

.send-button {
  background: #007bff;
  border: none;
  margin-left: 10px;
  color: white;
  padding: 0 20px;
  border-radius: 50%;
  cursor: pointer;
  font-size: 18px;
  transition: background 0.2s ease, transform 0.2s ease;
}

.send-button:hover {
  background: #0056b3;
  transform: scale(1.05);
}

/* Typing Indicator */
.typing-indicator {
  display: flex;
  align-items: center;
  gap: 6px;
  margin: 4px 0;
  padding: 10px 16px;
  background: #f1f0f0;
  border-radius: 15px 15px 15px 0;
  width: fit-content;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
  opacity: 0;
  animation: fadeIn 0.3s forwards;
  transition: opacity 0.4s ease-in-out;
}

.typing-indicator.hidden {
  opacity: 0;
  pointer-events: none;
}

/* Dots Animation */
.dot {
  width: 8px;
  height: 8px;
  background: #555;
  border-radius: 50%;
  animation: blink 1.4s infinite both;
}

.dot:nth-child(1) { animation-delay: 0s; }
.dot:nth-child(2) { animation-delay: 0.2s; }
.dot:nth-child(3) { animation-delay: 0.4s; }

@keyframes blink {
  0%, 80%, 100% { opacity: 0.2; transform: scale(0.8); }
  40% { opacity: 1; transform: scale(1); }
}

/* Smooth fade-in */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(5px); }
  to { opacity: 1; transform: translateY(0); }
}},
Message.css : {/* Message.css */

/* General message container */
.message {
  display: flex;
  margin: 12px 0;
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  animation: fadeSlideIn 0.4s ease;
}

/* Different alignment for user vs. bot */
.user-message {
  justify-content: flex-end;
}

.bot-message {
  justify-content: flex-start;
}

/* Chat bubble container */
.message-bubble {
  max-width: 70%;
  padding: 12px 18px;
  border-radius: 20px;
  position: relative;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
  animation: bubblePop 0.3s ease;
}

/* User bubble style */
.user-message .message-bubble {
  background: linear-gradient(135deg, #6a11cb, #2575fc);
  color: #fff;
  border-bottom-right-radius: 6px;
}

/* Bot bubble style */
.bot-message .message-bubble {
  background: #ffffff;
  color: #333;
  border: 1px solid #e0e0e0;
  border-bottom-left-radius: 6px;
}

/* Sender label */
.message-meta {
  font-size: 0.75rem;
  font-weight: 600;
  margin-bottom: 4px;
  opacity: 0.7;
}

.user-message .sender-label {
  color: #d1d9ff;
  text-align: right;
  display: block;
}

.bot-message .sender-label {
  color: #888;
  text-align: left;
  display: block;
}

/* Message text */
.message-text {
  font-size: 1rem;
  line-height: 1.4;
  word-wrap: break-word;
}

/* Timestamp */
.message-time {
  font-size: 0.7rem;
  margin-top: 6px;
  opacity: 0.6;
  text-align: right;
}

.bot-message .message-time {
  text-align: left;
  color: #666;
}

.user-message .message-time {
  text-align: right;
  color: #e0e0ff;
}

/* Animations */
@keyframes fadeSlideIn {
  from {
    opacity: 0;
    transform: translateY(12px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes bubblePop {
  from {
    transform: scale(0.95);
  }
  to {
    transform: scale(1);
  }
}},
SplashPage.css : {/* Overall page styles */
.splash-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background: linear-gradient(45deg, #00c6ff, #0072ff);
  color: white;
  font-family: 'Roboto', sans-serif;
  text-align: center;
  opacity: 0;
  transform: translateY(20px);
  animation: fadeInUp 1.5s forwards;
}

@keyframes fadeInUp {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Title & Tagline */
.title {
  font-size: 3rem;
  font-weight: bold;
  margin-bottom: 20px;
  letter-spacing: 1px;
}

.tagline {
  font-size: 1.2rem;
  margin-bottom: 40px;
  font-weight: 300;
}

/* Animated Chat Bubble */
.bubble-svg {
  animation: pulse 1.5s infinite ease-in-out;
  margin-bottom: 30px;
  transform-origin: center;
}

@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.2);
  }
  100% {
    transform: scale(1);
  }
}

@keyframes bubbleRotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

/* Loader Styles */
.loader-container {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 30px;
}

.loader {
  border: 8px solid rgba(255, 255, 255, 0.3);
  border-top: 8px solid #0072ff;
  border-radius: 50%;
  width: 50px;
  height: 50px;
  animation: spin 1.5s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Button Styles */
.enter-btn {
  background-color: #0072ff;
  color: white;
  padding: 12px 30px;
  border: none;
  border-radius: 30px;
  font-size: 1.2rem;
  cursor: pointer;
  transition: transform 0.2s ease-in-out, background-color 0.2s ease-in-out;
  margin-top: 30px;
}

.enter-btn:hover {
  background-color: #005bb5;
  transform: translateY(-5px) scale(1.05); /* Slight zoom and lift */
}

.enter-btn:focus {
  outline: none;
}},
style.css : {/* ================================
   Global Reset & Theme
=================================== */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

body {
  background-color: #2c2f38;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  color: #fff;
}

/* ================================
   Chatbot Container
=================================== */
#chatbot-container {
  background: #1f2229;
  width: 420px;
  max-width: 95vw;
  height: 80vh;
  border-radius: 16px;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.4);
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

/* Chat header */
.chatbot-header {
  background: linear-gradient(135deg, #007bff, #00c6ff);
  padding: 16px;
  text-align: center;
  font-weight: bold;
  font-size: 18px;
  color: #fff;
  letter-spacing: 0.5px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
}

/* Chat messages container */
.chatbox {
  flex: 1;
  padding: 15px;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  gap: 12px;
  background: #2c2f38;
  scroll-behavior: smooth;
}

/* Scrollbar styling */
.chatbox::-webkit-scrollbar {
  width: 6px;
}
.chatbox::-webkit-scrollbar-thumb {
  background: #555;
  border-radius: 3px;
}
.chatbox::-webkit-scrollbar-thumb:hover {
  background: #777;
}

/* ================================
   Message Bubbles
=================================== */
.message {
  display: flex;
  margin-bottom: 10px;
}

.message-bubble {
  padding: 10px 15px;
  border-radius: 20px;
  max-width: 70%;
  word-wrap: break-word;
  font-size: 15px;
  line-height: 1.4;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  transition: transform 0.2s ease-in-out, background 0.3s;
  animation: fadeInUp 0.35s ease both;
}

.message-bubble:hover {
  transform: scale(1.03);
}

/* User message bubble */
.user-message {
  justify-content: flex-end;
}
.user-message .message-bubble {
  background: #007bff;
  color: #fff;
  border-radius: 15px 15px 0 15px;
}

/* Bot message bubble */
.bot-message {
  justify-content: flex-start;
}
.bot-message .message-bubble {
  background: #f1f0f0;
  color: #333;
  border-radius: 15px 15px 15px 0;
}

/* Sender labels */
.sender-label {
  font-size: 12px;
  font-weight: 600;
  margin-bottom: 4px;
  opacity: 0.8;
  display: block;
}

/* ================================
   Typing Indicator
=================================== */
.typing-indicator {
  display: flex;
  align-items: center;
  gap: 4px;
  padding: 6px 12px;
  background: #f1f0f0;
  border-radius: 12px;
  max-width: fit-content;
  color: #333;
  font-size: 13px;
}

.dot {
  width: 6px;
  height: 6px;
  background: #555;
  border-radius: 50%;
  animation: bounce 1.3s infinite;
}
.dot:nth-child(2) {
  animation-delay: 0.2s;
}
.dot:nth-child(3) {
  animation-delay: 0.4s;
}

@keyframes bounce {
  0%, 80%, 100% { transform: scale(0.6); opacity: 0.5; }
  40% { transform: scale(1); opacity: 1; }
}

/* ================================
   Input Area
=================================== */
.input-area {
  display: flex;
  padding: 12px;
  background: #1f2229;
  border-top: 1px solid #333;
  gap: 10px;
}

.input-area input {
  flex: 1;
  padding: 10px 14px;
  border: none;
  border-radius: 20px;
  outline: none;
  background: #2e323c;
  color: #fff;
  font-size: 14px;
}

.input-area input::placeholder {
  color: #aaa;
}

.input-area button {
  background: #007bff;
  border: none;
  border-radius: 20px;
  padding: 10px 16px;
  color: white;
  font-size: 15px;
  font-weight: bold;
  cursor: pointer;
  transition: background 0.25s ease;
}

.input-area button:hover {
  background: #0056b3;
}

/* ================================
   Animations
=================================== */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(8px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}},
index.html : {<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Topia Global Wellness Chatbot</title>
    <link rel="stylesheet" href="style.css" />
  </head>
  <body>
    <div id="chatbot-container">
      <h1>Topia Global Wellness Chatbot</h1>
      <div id="chatbot" class="chatbox">
        <!-- Chat messages will appear here -->
      </div>
      <div class="input-container">
        <input type="text" id="user-input" placeholder="Type your message here..." />
        <button id="send-button">Send</button>
      </div>
    </div>
    <script src="/src/Chatbot.js"></script>
    <script>
      document.getElementById('send-button').addEventListener('click', () => {
        const userInput = document.getElementById('user-input').value;
        if (userInput) {
          fetch('/chatbot', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_input: userInput }),
          })
            .then(response => response.json())
            .then(data => {
              const chatbotDiv = document.getElementById('chatbot');
              chatbotDiv.innerHTML += `<div class="bubble reply"><div class="bubble-content"><p class="user-msg"><strong>You:</strong> ${userInput}</p></div></div>`;
              chatbotDiv.innerHTML += `<div class="bubble bot-msg bubble-typing"><div class="bubble-content"><p><strong>Bot:</strong> ${data.response}</p></div></div>`;
              document.getElementById('user-input').value = '';
              chatbotDiv.scrollTop = chatbotDiv.scrollHeight; // Auto-scroll to the bottom
            })
            .catch(error => console.error('Error:', error));
        }
      });

      document.getElementById('user-input').addEventListener('keypress', (event) => {
        if (event.key === 'Enter') {
          document.getElementById('send-button').click();
        }
      });
    </script>
  </body>
</html>}